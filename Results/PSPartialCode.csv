TimeGenerated,EventID,HostApplication
2018-12-05 23:04:00,800,"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -Version 5.1 -s -NoLogo -NoProfile EngineVersion=5.1.17763.134 RunspaceId=117633a5-f413-4fae-ab63-fca26fe3db87 PipelineId=1 ScriptName= CommandLine=Add-Type @"" Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" using System; using System.Text; using System.Runtime.InteropServices; namespace CustomNameSpace { public class advapi32 { [DllImport(""advapi32.dll"", CharSet = CharSet.Auto)] public static extern Int32 RegQueryInfoKey( Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, StringBuilder lpClass, [In, Out] ref UInt32 lpcbClass, UInt32 lpReserved, out UInt32 lpcSubKeys, out UInt32 lpcbMaxSubKeyLen, out UInt32 lpcbMaxClassLen, out UInt32 lpcValues, out UInt32 lpcbMaxValueNameLen, out UInt32 lpcbMaxValueLen, out UInt32 lpcbSecurityDescriptor, out Int64 lpftLastWriteTime ); } }"" "
2018-12-05 23:04:02,800,"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -Version 5.1 -s -NoLogo -NoProfile EngineVersion=5.1.17763.134 RunspaceId=1ec504a7-9a4d-47ca-8b5a-165de1b71865 PipelineId=1 ScriptName= CommandLine=Add-Type @"" Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" using System; using System.Text; using System.Runtime.InteropServices; namespace CustomNameSpace { public class advapi32 { [DllImport(""advapi32.dll"", CharSet = CharSet.Auto)] public static extern Int32 RegQueryInfoKey( Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, StringBuilder lpClass, [In, Out] ref UInt32 lpcbClass, UInt32 lpReserved, out UInt32 lpcSubKeys, out UInt32 lpcbMaxSubKeyLen, out UInt32 lpcbMaxClassLen, out UInt32 lpcValues, out UInt32 lpcbMaxValueNameLen, out UInt32 lpcbMaxValueLen, out UInt32 lpcbSecurityDescriptor, out Int64 lpftLastWriteTime ); } }"" "
2018-12-05 23:04:04,800,"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -Version 5.1 -s -NoLogo -NoProfile EngineVersion=5.1.17763.134 RunspaceId=7de1e97e-7f7a-4115-90fe-499c1977e8a3 PipelineId=1 ScriptName= CommandLine=Add-Type @"" Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" using System; using System.Text; using System.Runtime.InteropServices; namespace CustomNameSpace { public class advapi32 { [DllImport(""advapi32.dll"", CharSet = CharSet.Auto)] public static extern Int32 RegQueryInfoKey( Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, StringBuilder lpClass, [In, Out] ref UInt32 lpcbClass, UInt32 lpReserved, out UInt32 lpcSubKeys, out UInt32 lpcbMaxSubKeyLen, out UInt32 lpcbMaxClassLen, out UInt32 lpcValues, out UInt32 lpcbMaxValueNameLen, out UInt32 lpcbMaxValueLen, out UInt32 lpcbSecurityDescriptor, out Int64 lpftLastWriteTime ); } }"" "
2018-12-05 23:04:05,800,"C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -Version 5.1 -s -NoLogo -NoProfile EngineVersion=5.1.17763.134 RunspaceId=9860362e-479e-4d53-a6c7-09c86e561e4c PipelineId=1 ScriptName= CommandLine=Add-Type @"" Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" using System; using System.Text; using System.Runtime.InteropServices; namespace CustomNameSpace { public class advapi32 { [DllImport(""advapi32.dll"", CharSet = CharSet.Auto)] public static extern Int32 RegQueryInfoKey( Microsoft.Win32.SafeHandles.SafeRegistryHandle hKey, StringBuilder lpClass, [In, Out] ref UInt32 lpcbClass, UInt32 lpReserved, out UInt32 lpcSubKeys, out UInt32 lpcbMaxSubKeyLen, out UInt32 lpcbMaxClassLen, out UInt32 lpcValues, out UInt32 lpcbMaxValueNameLen, out UInt32 lpcbMaxValueLen, out UInt32 lpcbSecurityDescriptor, out Int64 lpftLastWriteTime ); } }"" "
2020-11-30 20:12:20,800,"C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoLogo -NoProfile -Command Install-Module -Name PackageManagement -Force -MinimumVersion 1.4.6 -Scope CurrentUser -AllowClobber EngineVersion=5.1.17763.134 RunspaceId=eec20403-b878-408e-a27a-9ca4a97fdaf2 PipelineId=2 ScriptName=C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1 CommandLine= Add-Type -ReferencedAssemblies $requiredAssembly -TypeDefinition $source -Language CSharp -ErrorAction SilentlyContinue Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""ReferencedAssemblies""; value=""System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, ..."" ParameterBinding(Add-Type): name=""TypeDefinition""; value=""using System; using System.Net; using System.Management.Automation; using Microsoft.Win32.SafeHandles; using System.Security.Cryptography; using System.Runtime.InteropServices; using System.Runtime.ConstrainedExecution; using System.Runtime.Versioning; using System.Security; namespace Microsoft.PowerShell.Commands.PowerShellGet { public static class Telemetry { public static void TraceMessageArtifactsNotFound(string[] artifactsNotFound, string operationName) { Microsoft.PowerShell.Telemetry.Internal.TelemetryAPI.TraceMessage(operationName, new { ArtifactsNotFound = artifactsNotFound }); } public static void TraceMessageNonPSGalleryRegistration(string sourceLocationType, string sourceLocationHash, string installationPolicy, string packageManagementProvider, string publishLocationHash, string scriptSourceLocationHash, string scriptPublishLocationHash, string operationName) { Microsoft.PowerShell.Telemetry.Internal.TelemetryAPI.TraceMessage(operationName, new { SourceLocationType = sourceLocationType, SourceLocationHash = sourceLocationHash, InstallationPolicy = installationPolicy, PackageManagementProvider = packageManagementProvider, PublishLocationHash = publishLocationHash, ScriptSourceLocationHash = scriptSourceLocationHash, ScriptPublishLocationHash = scriptPublishLocationHash }); } } /// <summary> /// Used by Ping-Endpoint function to supply webproxy to HttpClient /// We cannot use System.Net.WebProxy because this is not available on CoreClr /// </summary> public class InternalWebProxy : IWebProxy { Uri _proxyUri; ICredentials _credentials; public InternalWebProxy(Uri uri, ICredentials credentials) { Credentials = credentials; _proxyUri = uri; } /// <summary> /// Credentials used by WebProxy /// </summary> public ICredentials Credentials { get { return _credentials; } set { _credentials = value; } } public Uri GetProxy(Uri destination) { return _proxyUri; } public bool IsBypassed(Uri host) { return false; } } [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)] public struct CERT_CHAIN_POLICY_PARA { public CERT_CHAIN_POLICY_PARA(int size) { cbSize = (uint) size; dwFlags = 0; pvExtraPolicyPara = IntPtr.Zero; } public uint cbSize; public uint dwFlags; public IntPtr pvExtraPolicyPara; } [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)] public struct CERT_CHAIN_POLICY_STATUS { public CERT_CHAIN_POLICY_STATUS(int size) { cbSize = (uint) size; dwError = 0; lChainIndex = IntPtr.Zero; lElementIndex = IntPtr.Zero; pvExtraPolicyStatus = IntPtr.Zero; } public uint cbSize; public uint dwError; public IntPtr lChainIndex; public IntPtr lElementIndex; public IntPtr pvExtraPolicyStatus; } // Internal SafeHandleZeroOrMinusOneIsInvalid class to remove the dependency on .Net Framework 4.6. public abstract class InternalSafeHandleZeroOrMinusOneIsInvalid : SafeHandle { protected InternalSafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { } public override bool IsInvalid { get { return handle == IntPtr.Zero || handle == new IntPtr(-1); } } } // Internal SafeX509ChainHandle class to remove the dependency on .Net Framework 4.6. [SecurityCritical] public sealed class InternalSafeX509ChainHandle : InternalSafeHandleZeroOrMinusOneIsInvalid { private InternalSafeX509ChainHandle () : base(true) {} internal InternalSafeX509ChainHandle (IntPtr handle) : base (true) { SetHandle(handle); } internal static InternalSafeX509ChainHandle InvalidHandle { get { return new InternalSafeX509ChainHandle(IntPtr.Zero); } } [SecurityCritical] override protected bool ReleaseHandle() { CertFreeCertificateChain(handle); return true; } [DllImport(""Crypt32.dll"", SetLastError=true)] [SuppressUnmanagedCodeSecurity, ResourceExposure(ResourceScope.None), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)] private static extern void CertFreeCertificateChain(IntPtr handle); } public class Win32Helpers { [DllImport(""Crypt32.dll"", CharSet=CharSet.Auto, SetLastError=true)] public extern static bool CertVerifyCertificateChainPolicy( [In] IntPtr pszPolicyOID, [In] SafeX509ChainHandle pChainContext, [In] ref CERT_CHAIN_POLICY_PARA pPolicyPara, [In,Out] ref CERT_CHAIN_POLICY_STATUS pPolicyStatus); [DllImport(""Crypt32.dll"", CharSet=CharSet.Auto, SetLastError=true)] public static extern SafeX509ChainHandle CertDuplicateCertificateChain( [In] IntPtr pChainContext); [DllImport(""Crypt32.dll"", CharSet=CharSet.Auto, SetLastError=true)] [ResourceExposure(ResourceScope.None)] public static extern SafeX509ChainHandle CertDuplicateCertificateChain( [In] SafeX509ChainHandle pChainContext); public static bool IsMicrosoftCertificate([In] SafeX509ChainHandle pChainContext) { //------------------------------------------------------------------------- // CERT_CHAIN_POLICY_MICROSOFT_ROOT // // Checks if the last element of the first simple chain contains a // Microsoft root public key. If it doesn't contain a Microsoft root // public key, dwError is set to CERT_E_UNTRUSTEDROOT. // // pPolicyPara is optional. However, // MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG can be set in // the dwFlags in pPolicyPara to also check for the Microsoft Test Roots. // // MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG can be set // in the dwFlags in pPolicyPara to check for the Microsoft root for // application signing instead of the Microsoft product root. This flag // explicitly checks for the application root only and cannot be combined // with the test root flag. // // MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG can be set // in the dwFlags in pPolicyPara to always disable the Flight root. // // pvExtraPolicyPara and pvExtraPolicyStatus aren't used and must be set // to NULL. //-------------------------------------------------------------------------- const uint MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 0x00010000; const uint MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 0x00020000; //const uint MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 0x00040000; CERT_CHAIN_POLICY_PARA PolicyPara = new CERT_CHAIN_POLICY_PARA(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_PARA))); CERT_CHAIN_POLICY_STATUS PolicyStatus = new CERT_CHAIN_POLICY_STATUS(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_STATUS))); int CERT_CHAIN_POLICY_MICROSOFT_ROOT = 7; PolicyPara.dwFlags = (uint) MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG; bool isMicrosoftRoot = false; if(CertVerifyCertificateChainPolicy(new IntPtr(CERT_CHAIN_POLICY_MICROSOFT_ROOT), pChainContext, ref PolicyPara, ref PolicyStatus)) { isMicrosoftRoot = (PolicyStatus.dwError == 0); } // Also check for the Microsoft root for application signing if the Microsoft product root verification is unsuccessful. if(!isMicrosoftRoot) { // Some Microsoft modules can be signed with Microsoft Application Root instead of Microsoft Product Root, // So we need to use the MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG for the certificate verification. // MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG can not be used // with MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG, // so additional CertVerifyCertificateChainPolicy call is required to verify the given certificate is in Microsoft Application Root. // CERT_CHAIN_POLICY_PARA PolicyPara2 = new CERT_CHAIN_POLICY_PARA(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_PARA))); CERT_CHAIN_POLICY_STATUS PolicyStatus2 = new CERT_CHAIN_POLICY_STATUS(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_STATUS))); PolicyPara2.dwFlags = (uint) MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG; if(CertVerifyCertificateChainPolicy(new IntPtr(CERT_CHAIN_POLICY_MICROSOFT_ROOT), pChainContext, ref PolicyPara2, ref PolicyStatus2)) { isMicrosoftRoot = (PolicyStatus2.dwError == 0); } } return isMicrosoftRoot; } } } "" ParameterBinding(Add-Type): name=""Language""; value=""CSharp"" ParameterBinding(Add-Type): name=""ErrorAction""; value=""SilentlyContinue"" "
2020-12-01 14:06:36,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606824388-9489f731-d57a-4ca4-8231-592ad004bb361606824356283\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-807114' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=18c67cce-6483-444f-abe8-4db0ad44adbd PipelineId=3 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
2020-12-01 14:06:40,800,"C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner ""=====> PowerShell Integrated Console v2020.6.0 <===== "" -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606824388-9489f731-d57a-4ca4-8231-592ad004bb361606824356283\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-807114' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=7de97aaf-b827-45e5-9413-e9b772d3e8a2 PipelineId=11 ScriptName=C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PSModule.psm1 CommandLine= Add-Type -ReferencedAssemblies $requiredAssembly -TypeDefinition $source -Language CSharp -ErrorAction SilentlyContinue Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""ReferencedAssemblies""; value=""System.Management.Automation, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, ..."" ParameterBinding(Add-Type): name=""TypeDefinition""; value=""using System; using System.Net; using System.Management.Automation; using Microsoft.Win32.SafeHandles; using System.Security.Cryptography; using System.Runtime.InteropServices; using System.Runtime.ConstrainedExecution; using System.Runtime.Versioning; using System.Security; namespace Microsoft.PowerShell.Commands.PowerShellGet { public static class Telemetry { public static void TraceMessageArtifactsNotFound(string[] artifactsNotFound, string operationName) { Microsoft.PowerShell.Telemetry.Internal.TelemetryAPI.TraceMessage(operationName, new { ArtifactsNotFound = artifactsNotFound }); } public static void TraceMessageNonPSGalleryRegistration(string sourceLocationType, string sourceLocationHash, string installationPolicy, string packageManagementProvider, string publishLocationHash, string scriptSourceLocationHash, string scriptPublishLocationHash, string operationName) { Microsoft.PowerShell.Telemetry.Internal.TelemetryAPI.TraceMessage(operationName, new { SourceLocationType = sourceLocationType, SourceLocationHash = sourceLocationHash, InstallationPolicy = installationPolicy, PackageManagementProvider = packageManagementProvider, PublishLocationHash = publishLocationHash, ScriptSourceLocationHash = scriptSourceLocationHash, ScriptPublishLocationHash = scriptPublishLocationHash }); } } /// <summary> /// Used by Ping-Endpoint function to supply webproxy to HttpClient /// We cannot use System.Net.WebProxy because this is not available on CoreClr /// </summary> public class InternalWebProxy : IWebProxy { Uri _proxyUri; ICredentials _credentials; public InternalWebProxy(Uri uri, ICredentials credentials) { Credentials = credentials; _proxyUri = uri; } /// <summary> /// Credentials used by WebProxy /// </summary> public ICredentials Credentials { get { return _credentials; } set { _credentials = value; } } public Uri GetProxy(Uri destination) { return _proxyUri; } public bool IsBypassed(Uri host) { return false; } } [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)] public struct CERT_CHAIN_POLICY_PARA { public CERT_CHAIN_POLICY_PARA(int size) { cbSize = (uint) size; dwFlags = 0; pvExtraPolicyPara = IntPtr.Zero; } public uint cbSize; public uint dwFlags; public IntPtr pvExtraPolicyPara; } [StructLayout(LayoutKind.Sequential, CharSet=CharSet.Unicode)] public struct CERT_CHAIN_POLICY_STATUS { public CERT_CHAIN_POLICY_STATUS(int size) { cbSize = (uint) size; dwError = 0; lChainIndex = IntPtr.Zero; lElementIndex = IntPtr.Zero; pvExtraPolicyStatus = IntPtr.Zero; } public uint cbSize; public uint dwError; public IntPtr lChainIndex; public IntPtr lElementIndex; public IntPtr pvExtraPolicyStatus; } // Internal SafeHandleZeroOrMinusOneIsInvalid class to remove the dependency on .Net Framework 4.6. public abstract class InternalSafeHandleZeroOrMinusOneIsInvalid : SafeHandle { protected InternalSafeHandleZeroOrMinusOneIsInvalid(bool ownsHandle) : base(IntPtr.Zero, ownsHandle) { } public override bool IsInvalid { get { return handle == IntPtr.Zero || handle == new IntPtr(-1); } } } // Internal SafeX509ChainHandle class to remove the dependency on .Net Framework 4.6. [SecurityCritical] public sealed class InternalSafeX509ChainHandle : InternalSafeHandleZeroOrMinusOneIsInvalid { private InternalSafeX509ChainHandle () : base(true) {} internal InternalSafeX509ChainHandle (IntPtr handle) : base (true) { SetHandle(handle); } internal static InternalSafeX509ChainHandle InvalidHandle { get { return new InternalSafeX509ChainHandle(IntPtr.Zero); } } [SecurityCritical] override protected bool ReleaseHandle() { CertFreeCertificateChain(handle); return true; } [DllImport(""Crypt32.dll"", SetLastError=true)] [SuppressUnmanagedCodeSecurity, ResourceExposure(ResourceScope.None), ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)] private static extern void CertFreeCertificateChain(IntPtr handle); } public class Win32Helpers { [DllImport(""Crypt32.dll"", CharSet=CharSet.Auto, SetLastError=true)] public extern static bool CertVerifyCertificateChainPolicy( [In] IntPtr pszPolicyOID, [In] SafeX509ChainHandle pChainContext, [In] ref CERT_CHAIN_POLICY_PARA pPolicyPara, [In,Out] ref CERT_CHAIN_POLICY_STATUS pPolicyStatus); [DllImport(""Crypt32.dll"", CharSet=CharSet.Auto, SetLastError=true)] public static extern SafeX509ChainHandle CertDuplicateCertificateChain( [In] IntPtr pChainContext); [DllImport(""Crypt32.dll"", CharSet=CharSet.Auto, SetLastError=true)] [ResourceExposure(ResourceScope.None)] public static extern SafeX509ChainHandle CertDuplicateCertificateChain( [In] SafeX509ChainHandle pChainContext); public static bool IsMicrosoftCertificate([In] SafeX509ChainHandle pChainContext) { //------------------------------------------------------------------------- // CERT_CHAIN_POLICY_MICROSOFT_ROOT // // Checks if the last element of the first simple chain contains a // Microsoft root public key. If it doesn't contain a Microsoft root // public key, dwError is set to CERT_E_UNTRUSTEDROOT. // // pPolicyPara is optional. However, // MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG can be set in // the dwFlags in pPolicyPara to also check for the Microsoft Test Roots. // // MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG can be set // in the dwFlags in pPolicyPara to check for the Microsoft root for // application signing instead of the Microsoft product root. This flag // explicitly checks for the application root only and cannot be combined // with the test root flag. // // MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG can be set // in the dwFlags in pPolicyPara to always disable the Flight root. // // pvExtraPolicyPara and pvExtraPolicyStatus aren't used and must be set // to NULL. //-------------------------------------------------------------------------- const uint MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG = 0x00010000; const uint MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG = 0x00020000; //const uint MICROSOFT_ROOT_CERT_CHAIN_POLICY_DISABLE_FLIGHT_ROOT_FLAG = 0x00040000; CERT_CHAIN_POLICY_PARA PolicyPara = new CERT_CHAIN_POLICY_PARA(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_PARA))); CERT_CHAIN_POLICY_STATUS PolicyStatus = new CERT_CHAIN_POLICY_STATUS(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_STATUS))); int CERT_CHAIN_POLICY_MICROSOFT_ROOT = 7; PolicyPara.dwFlags = (uint) MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG; bool isMicrosoftRoot = false; if(CertVerifyCertificateChainPolicy(new IntPtr(CERT_CHAIN_POLICY_MICROSOFT_ROOT), pChainContext, ref PolicyPara, ref PolicyStatus)) { isMicrosoftRoot = (PolicyStatus.dwError == 0); } // Also check for the Microsoft root for application signing if the Microsoft product root verification is unsuccessful. if(!isMicrosoftRoot) { // Some Microsoft modules can be signed with Microsoft Application Root instead of Microsoft Product Root, // So we need to use the MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG for the certificate verification. // MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG can not be used // with MICROSOFT_ROOT_CERT_CHAIN_POLICY_ENABLE_TEST_ROOT_FLAG, // so additional CertVerifyCertificateChainPolicy call is required to verify the given certificate is in Microsoft Application Root. // CERT_CHAIN_POLICY_PARA PolicyPara2 = new CERT_CHAIN_POLICY_PARA(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_PARA))); CERT_CHAIN_POLICY_STATUS PolicyStatus2 = new CERT_CHAIN_POLICY_STATUS(Marshal.SizeOf(typeof(CERT_CHAIN_POLICY_STATUS))); PolicyPara2.dwFlags = (uint) MICROSOFT_ROOT_CERT_CHAIN_POLICY_CHECK_APPLICATION_ROOT_FLAG; if(CertVerifyCertificateChainPolicy(new IntPtr(CERT_CHAIN_POLICY_MICROSOFT_ROOT), pChainContext, ref PolicyPara2, ref PolicyStatus2)) { isMicrosoftRoot = (PolicyStatus2.dwError == 0); } } return isMicrosoftRoot; } } } "" ParameterBinding(Add-Type): name=""Language""; value=""CSharp"" ParameterBinding(Add-Type): name=""ErrorAction""; value=""SilentlyContinue"" "
2020-12-01 14:06:41,800,"C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner ""=====> PowerShell Integrated Console v2020.6.0 <===== "" -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606824388-9489f731-d57a-4ca4-8231-592ad004bb361606824356283\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-807114' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=7de97aaf-b827-45e5-9413-e9b772d3e8a2 PipelineId=16 ScriptName=C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\SetupTeardown.ps1 CommandLine=& $SafeCommands['Add-Type'] -TypeDefinition @' Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" namespace Pester { using System; using System.Management.Automation; public static class ClosingBraceFinder { public static int GetClosingBraceIndex(PSToken[] tokens, int startIndex) { int groupLevel = 1; int len = tokens.Length; for (int i = startIndex + 1; i < len; i++) { PSTokenType type = tokens[i].Type; if (type == PSTokenType.GroupStart) { groupLevel++; } else if (type == PSTokenType.GroupEnd) { groupLevel--; if (groupLevel <= 0) { return i; } } } return -1; } } }"" "
2020-12-01 14:26:49,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606825601-345f8a27-beb2-4ba7-a93f-54ff5da37a9a1606825593873\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-530839' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=ec8e6b9a-87b7-4dd3-a57f-f5220f11e25b PipelineId=3 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
2020-12-01 16:01:52,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606824354-7f04a64d-0b87-4584-8bd4-2f63876949a51606823913139\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-250585' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=670d7905-3626-413f-bb3b-026513a2925c PipelineId=3 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
2020-12-01 16:07:40,800,"C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner ""=====> PowerShell Integrated Console v2020.6.0 <===== "" -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606825601-345f8a27-beb2-4ba7-a93f-54ff5da37a9a1606825593873\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-530839' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=ded60ff8-6331-4a62-aac6-eb97adae3502 PipelineId=19495 ScriptName=C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\SetupTeardown.ps1 CommandLine=& $SafeCommands['Add-Type'] -TypeDefinition @' Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" namespace Pester { using System; using System.Management.Automation; public static class ClosingBraceFinder { public static int GetClosingBraceIndex(PSToken[] tokens, int startIndex) { int groupLevel = 1; int len = tokens.Length; for (int i = startIndex + 1; i < len; i++) { PSTokenType type = tokens[i].Type; if (type == PSTokenType.GroupStart) { groupLevel++; } else if (type == PSTokenType.GroupEnd) { groupLevel--; if (groupLevel <= 0) { return i; } } } return -1; } } }"" "
2020-12-01 16:07:41,800,"C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner ""=====> PowerShell Integrated Console v2020.6.0 <===== "" -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1606825601-345f8a27-beb2-4ba7-a93f-54ff5da37a9a1606825593873\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-6256-530839' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=6406ab6a-fbf7-46d7-a06c-d95c6286adcd PipelineId=23 ScriptName=C:\Program Files\WindowsPowerShell\Modules\Pester\3.4.0\Functions\SetupTeardown.ps1 CommandLine=& $SafeCommands['Add-Type'] -TypeDefinition @' Details: CommandInvocation(Add-Type): ""Add-Type"" ParameterBinding(Add-Type): name=""TypeDefinition""; value="" namespace Pester { using System; using System.Management.Automation; public static class ClosingBraceFinder { public static int GetClosingBraceIndex(PSToken[] tokens, int startIndex) { int groupLevel = 1; int len = tokens.Length; for (int i = startIndex + 1; i < len; i++) { PSTokenType type = tokens[i].Type; if (type == PSTokenType.GroupStart) { groupLevel++; } else if (type == PSTokenType.GroupEnd) { groupLevel--; if (groupLevel <= 0) { return i; } } } return -1; } } }"" "
2021-03-09 14:23:11,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1615292571-e7a4ff79-8e64-44e3-8bce-2f7c36265b6a1615292550544\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-5108-593698' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=7e59bcea-be0b-45e6-a4c1-dae36e907aa1 PipelineId=3 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
2021-08-22 14:52:51,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1629636756-f92f5486-760f-4e94-a8a2-eda3e304ceea1629636746253\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-4920-823309' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=67bb6eca-009d-40fa-ab5a-2e5c0d3cc6b5 PipelineId=4 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
2021-08-22 14:53:29,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1629636799-6dc0087e-baab-4549-a9de-386441e4d9581629636793227\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-4920-555626' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=a079a766-22b6-4208-9c34-9a84f132799a PipelineId=3 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
2021-09-20 11:40:18,800,C:\WINDOWS\System32\WindowsPowerShell\v1.0\powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -Command Import-Module 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PowerShellEditorServices\PowerShellEditorServices.psd1'; Start-EditorServices -HostName 'Visual Studio Code Host' -HostProfileId 'Microsoft.VSCode' -HostVersion '2020.6.0' -AdditionalModules @('PowerShellEditorServices.VSCode') -BundledModulesPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules' -EnableConsoleRepl -StartupBanner "=====> PowerShell Integrated Console v2020.6.0 <===== " -LogLevel 'Normal' -LogPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\logs\1632130805-228b280d-e3a2-444f-8d43-401248629d5a1632130729709\EditorServices.log' -SessionDetailsPath 'c:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\sessions\PSES-VSCode-9756-316611' -FeatureFlags @() EngineVersion=5.1.17763.134 RunspaceId=316c4a24-5b7f-4cb1-ac5f-1b0f4a47665e PipelineId=4 ScriptName=C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0\PSScriptAnalyzer.psm1 CommandLine= Add-Type -Path "$PSScriptRoot/Newtonsoft.Json.dll" Details: CommandInvocation(Add-Type): "Add-Type" ParameterBinding(Add-Type): name="Path"; value="C:\Users\SANSDFIR\.vscode\extensions\ms-vscode.powershell-2020.6.0\modules\PSScriptAnalyzer\1.19.0/Newtonsoft.Json.dll" 
